// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Sessions
{
	/// <summary>
	/// Input parameters for the <see cref="SessionsInterface.RegisterPlayers" /> function.
	/// </summary>
	public struct RegisterPlayersOptions
	{
		/// <summary>
		/// Name of the session for which to register players
		/// </summary>
		public Utf8String SessionName { get; set; }

		/// <summary>
		/// Array of players to register with the session
		/// </summary>
		public ProductUserId[] PlayersToRegister { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct RegisterPlayersOptionsInternal : ISettable<RegisterPlayersOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_SessionName;
		private System.IntPtr m_PlayersToRegister;
		private uint m_PlayersToRegisterCount;

		public Utf8String SessionName
		{
			set
			{
				Helper.Set(value, ref m_SessionName);
			}
		}

		public ProductUserId[] PlayersToRegister
		{
			set
			{
				Helper.Set(value, ref m_PlayersToRegister, out m_PlayersToRegisterCount);
			}
		}

		public void Set(ref RegisterPlayersOptions other)
		{
			m_ApiVersion = SessionsInterface.RegisterplayersApiLatest;
			SessionName = other.SessionName;
			PlayersToRegister = other.PlayersToRegister;
		}

		public void Set(ref RegisterPlayersOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = SessionsInterface.RegisterplayersApiLatest;
				SessionName = other.Value.SessionName;
				PlayersToRegister = other.Value.PlayersToRegister;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_SessionName);
			Helper.Dispose(ref m_PlayersToRegister);
		}
	}
}