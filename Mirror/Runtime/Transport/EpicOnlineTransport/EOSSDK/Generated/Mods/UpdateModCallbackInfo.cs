// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Mods
{
	/// <summary>
	/// Output parameters for the <see cref="ModsInterface.UpdateMod" /> Function. These parameters are received through the callback provided to <see cref="ModsInterface.UpdateMod" />
	/// </summary>
	public struct UpdateModCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Result code for the operation. <see cref="Result.Success" /> is returned if the request to update was successful, otherwise one of the error codes is returned.
		/// </summary>
		public Result ResultCode { get; set; }

		/// <summary>
		/// The Epic Account ID of the user for which mod update was requested
		/// </summary>
		public EpicAccountId LocalUserId { get; set; }

		/// <summary>
		/// Context that is passed into <see cref="ModsInterface.UpdateMod" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// Mod for which update was requested
		/// </summary>
		public ModIdentifier? Mod { get; set; }

		public Result? GetResultCode()
		{
			return ResultCode;
		}

		internal void Set(ref UpdateModCallbackInfoInternal other)
		{
			ResultCode = other.ResultCode;
			LocalUserId = other.LocalUserId;
			ClientData = other.ClientData;
			Mod = other.Mod;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct UpdateModCallbackInfoInternal : ICallbackInfoInternal, IGettable<UpdateModCallbackInfo>, ISettable<UpdateModCallbackInfo>, System.IDisposable
	{
		private Result m_ResultCode;
		private System.IntPtr m_LocalUserId;
		private System.IntPtr m_ClientData;
		private System.IntPtr m_Mod;

		public Result ResultCode
		{
			get
			{
				return m_ResultCode;
			}

			set
			{
				m_ResultCode = value;
			}
		}

		public EpicAccountId LocalUserId
		{
			get
			{
				EpicAccountId value;
				Helper.Get(m_LocalUserId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public object ClientData
		{
			get
			{
				object value;
				Helper.Get(m_ClientData, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_ClientData);
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public ModIdentifier? Mod
		{
			get
			{
				ModIdentifier? value;
				Helper.Get<ModIdentifierInternal, ModIdentifier>(m_Mod, out value);
				return value;
			}

			set
			{
				Helper.Set<ModIdentifier, ModIdentifierInternal>(ref value, ref m_Mod);
			}
		}

		public void Set(ref UpdateModCallbackInfo other)
		{
			ResultCode = other.ResultCode;
			LocalUserId = other.LocalUserId;
			ClientData = other.ClientData;
			Mod = other.Mod;
		}

		public void Set(ref UpdateModCallbackInfo? other)
		{
			if (other.HasValue)
			{
				ResultCode = other.Value.ResultCode;
				LocalUserId = other.Value.LocalUserId;
				ClientData = other.Value.ClientData;
				Mod = other.Value.Mod;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_ClientData);
			Helper.Dispose(ref m_Mod);
		}

		public void Get(out UpdateModCallbackInfo output)
		{
			output = new UpdateModCallbackInfo();
			output.Set(ref this);
		}
	}
}