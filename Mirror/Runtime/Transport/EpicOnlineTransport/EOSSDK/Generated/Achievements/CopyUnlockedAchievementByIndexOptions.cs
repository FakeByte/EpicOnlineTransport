// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Input parameters for the <see cref="AchievementsInterface.CopyUnlockedAchievementByIndex" /> function.
	/// </summary>
	public struct CopyUnlockedAchievementByIndexOptions
	{
		/// <summary>
		/// The Product User ID for the user who is copying the unlocked achievement
		/// </summary>
		public ProductUserId UserId { get; set; }

		/// <summary>
		/// Index of the unlocked achievement to retrieve from the cache
		/// </summary>
		public uint AchievementIndex { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct CopyUnlockedAchievementByIndexOptionsInternal : ISettable<CopyUnlockedAchievementByIndexOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_UserId;
		private uint m_AchievementIndex;

		public ProductUserId UserId
		{
			set
			{
				Helper.Set(value, ref m_UserId);
			}
		}

		public uint AchievementIndex
		{
			set
			{
				m_AchievementIndex = value;
			}
		}

		public void Set(ref CopyUnlockedAchievementByIndexOptions other)
		{
			m_ApiVersion = AchievementsInterface.CopyunlockedachievementbyindexApiLatest;
			UserId = other.UserId;
			AchievementIndex = other.AchievementIndex;
		}

		public void Set(ref CopyUnlockedAchievementByIndexOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AchievementsInterface.CopyunlockedachievementbyindexApiLatest;
				UserId = other.Value.UserId;
				AchievementIndex = other.Value.AchievementIndex;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_UserId);
		}
	}
}