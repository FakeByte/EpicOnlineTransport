// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Contains information about a single player achievement.
	/// </summary>
	public struct PlayerAchievement
	{
		/// <summary>
		/// This achievement's unique identifier.
		/// </summary>
		public Utf8String AchievementId { get; set; }

		/// <summary>
		/// Progress towards completing this achievement (as a percentage).
		/// </summary>
		public double Progress { get; set; }

		/// <summary>
		/// The POSIX timestamp when the achievement was unlocked. If the achievement has not been unlocked, this value will be <see cref="AchievementsInterface.AchievementUnlocktimeUndefined" />.
		/// </summary>
		public System.DateTimeOffset? UnlockTime { get; set; }

		/// <summary>
		/// Array of <see cref="PlayerStatInfo" /> structures containing information about stat thresholds used to unlock the achievement and the player's current values for those stats.
		/// </summary>
		public PlayerStatInfo[] StatInfo { get; set; }

		/// <summary>
		/// Localized display name for the achievement based on this specific player's current progress on the achievement.
		/// The current progress is updated when EOS_Achievements_QueryPlayerAchievements succeeds and when an achievement is unlocked.
		/// </summary>
		public Utf8String DisplayName { get; set; }

		/// <summary>
		/// Localized description for the achievement based on this specific player's current progress on the achievement.
		/// The current progress is updated when EOS_Achievements_QueryPlayerAchievements succeeds and when an achievement is unlocked.
		/// </summary>
		public Utf8String Description { get; set; }

		/// <summary>
		/// URL of an icon to display for the achievement based on this specific player's current progress on the achievement. This may be null if there is no data configured in the dev portal.
		/// The current progress is updated when EOS_Achievements_QueryPlayerAchievements succeeds and when an achievement is unlocked.
		/// </summary>
		public Utf8String IconURL { get; set; }

		/// <summary>
		/// Localized flavor text that can be used by the game in an arbitrary manner. This may be null if there is no data configured in the dev portal.
		/// </summary>
		public Utf8String FlavorText { get; set; }

		internal void Set(ref PlayerAchievementInternal other)
		{
			AchievementId = other.AchievementId;
			Progress = other.Progress;
			UnlockTime = other.UnlockTime;
			StatInfo = other.StatInfo;
			DisplayName = other.DisplayName;
			Description = other.Description;
			IconURL = other.IconURL;
			FlavorText = other.FlavorText;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct PlayerAchievementInternal : IGettable<PlayerAchievement>, ISettable<PlayerAchievement>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_AchievementId;
		private double m_Progress;
		private long m_UnlockTime;
		private int m_StatInfoCount;
		private System.IntPtr m_StatInfo;
		private System.IntPtr m_DisplayName;
		private System.IntPtr m_Description;
		private System.IntPtr m_IconURL;
		private System.IntPtr m_FlavorText;

		public Utf8String AchievementId
		{
			get
			{
				Utf8String value;
				Helper.Get(m_AchievementId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_AchievementId);
			}
		}

		public double Progress
		{
			get
			{
				return m_Progress;
			}

			set
			{
				m_Progress = value;
			}
		}

		public System.DateTimeOffset? UnlockTime
		{
			get
			{
				System.DateTimeOffset? value;
				Helper.Get(m_UnlockTime, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_UnlockTime);
			}
		}

		public PlayerStatInfo[] StatInfo
		{
			get
			{
				PlayerStatInfo[] value;
				Helper.Get<PlayerStatInfoInternal, PlayerStatInfo>(m_StatInfo, out value, m_StatInfoCount);
				return value;
			}

			set
			{
				Helper.Set<PlayerStatInfo, PlayerStatInfoInternal>(ref value, ref m_StatInfo, out m_StatInfoCount);
			}
		}

		public Utf8String DisplayName
		{
			get
			{
				Utf8String value;
				Helper.Get(m_DisplayName, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_DisplayName);
			}
		}

		public Utf8String Description
		{
			get
			{
				Utf8String value;
				Helper.Get(m_Description, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_Description);
			}
		}

		public Utf8String IconURL
		{
			get
			{
				Utf8String value;
				Helper.Get(m_IconURL, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_IconURL);
			}
		}

		public Utf8String FlavorText
		{
			get
			{
				Utf8String value;
				Helper.Get(m_FlavorText, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_FlavorText);
			}
		}

		public void Set(ref PlayerAchievement other)
		{
			m_ApiVersion = AchievementsInterface.PlayerachievementApiLatest;
			AchievementId = other.AchievementId;
			Progress = other.Progress;
			UnlockTime = other.UnlockTime;
			StatInfo = other.StatInfo;
			DisplayName = other.DisplayName;
			Description = other.Description;
			IconURL = other.IconURL;
			FlavorText = other.FlavorText;
		}

		public void Set(ref PlayerAchievement? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AchievementsInterface.PlayerachievementApiLatest;
				AchievementId = other.Value.AchievementId;
				Progress = other.Value.Progress;
				UnlockTime = other.Value.UnlockTime;
				StatInfo = other.Value.StatInfo;
				DisplayName = other.Value.DisplayName;
				Description = other.Value.Description;
				IconURL = other.Value.IconURL;
				FlavorText = other.Value.FlavorText;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_AchievementId);
			Helper.Dispose(ref m_StatInfo);
			Helper.Dispose(ref m_DisplayName);
			Helper.Dispose(ref m_Description);
			Helper.Dispose(ref m_IconURL);
			Helper.Dispose(ref m_FlavorText);
		}

		public void Get(out PlayerAchievement output)
		{
			output = new PlayerAchievement();
			output.Set(ref this);
		}
	}
}