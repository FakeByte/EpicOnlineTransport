// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Input parameters for the <see cref="AchievementsInterface.CopyPlayerAchievementByAchievementId" /> function.
	/// </summary>
	public struct CopyPlayerAchievementByAchievementIdOptions
	{
		/// <summary>
		/// The Product User ID for the user whose achievement is to be retrieved.
		/// </summary>
		public ProductUserId TargetUserId { get; set; }

		/// <summary>
		/// Achievement ID to search for when retrieving player achievement data from the cache.
		/// </summary>
		public Utf8String AchievementId { get; set; }

		/// <summary>
		/// The Product User ID for the user who is querying for a player achievement. For a Dedicated Server this should be null.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct CopyPlayerAchievementByAchievementIdOptionsInternal : ISettable<CopyPlayerAchievementByAchievementIdOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_TargetUserId;
		private System.IntPtr m_AchievementId;
		private System.IntPtr m_LocalUserId;

		public ProductUserId TargetUserId
		{
			set
			{
				Helper.Set(value, ref m_TargetUserId);
			}
		}

		public Utf8String AchievementId
		{
			set
			{
				Helper.Set(value, ref m_AchievementId);
			}
		}

		public ProductUserId LocalUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public void Set(ref CopyPlayerAchievementByAchievementIdOptions other)
		{
			m_ApiVersion = AchievementsInterface.CopyplayerachievementbyachievementidApiLatest;
			TargetUserId = other.TargetUserId;
			AchievementId = other.AchievementId;
			LocalUserId = other.LocalUserId;
		}

		public void Set(ref CopyPlayerAchievementByAchievementIdOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AchievementsInterface.CopyplayerachievementbyachievementidApiLatest;
				TargetUserId = other.Value.TargetUserId;
				AchievementId = other.Value.AchievementId;
				LocalUserId = other.Value.LocalUserId;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_TargetUserId);
			Helper.Dispose(ref m_AchievementId);
			Helper.Dispose(ref m_LocalUserId);
		}
	}
}