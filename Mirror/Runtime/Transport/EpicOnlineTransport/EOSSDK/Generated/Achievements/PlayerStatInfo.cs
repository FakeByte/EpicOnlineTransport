// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Contains information about a collection of stat info data.
	/// <seealso cref="PlayerAchievement" />
	/// </summary>
	public struct PlayerStatInfo
	{
		/// <summary>
		/// The name of the stat.
		/// </summary>
		public Utf8String Name { get; set; }

		/// <summary>
		/// The current value of the stat.
		/// </summary>
		public int CurrentValue { get; set; }

		/// <summary>
		/// The threshold value of the stat, used in determining when to unlock an achievement.
		/// </summary>
		public int ThresholdValue { get; set; }

		internal void Set(ref PlayerStatInfoInternal other)
		{
			Name = other.Name;
			CurrentValue = other.CurrentValue;
			ThresholdValue = other.ThresholdValue;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct PlayerStatInfoInternal : IGettable<PlayerStatInfo>, ISettable<PlayerStatInfo>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_Name;
		private int m_CurrentValue;
		private int m_ThresholdValue;

		public Utf8String Name
		{
			get
			{
				Utf8String value;
				Helper.Get(m_Name, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_Name);
			}
		}

		public int CurrentValue
		{
			get
			{
				return m_CurrentValue;
			}

			set
			{
				m_CurrentValue = value;
			}
		}

		public int ThresholdValue
		{
			get
			{
				return m_ThresholdValue;
			}

			set
			{
				m_ThresholdValue = value;
			}
		}

		public void Set(ref PlayerStatInfo other)
		{
			m_ApiVersion = AchievementsInterface.PlayerstatinfoApiLatest;
			Name = other.Name;
			CurrentValue = other.CurrentValue;
			ThresholdValue = other.ThresholdValue;
		}

		public void Set(ref PlayerStatInfo? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AchievementsInterface.PlayerstatinfoApiLatest;
				Name = other.Value.Name;
				CurrentValue = other.Value.CurrentValue;
				ThresholdValue = other.Value.ThresholdValue;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Name);
		}

		public void Get(out PlayerStatInfo output)
		{
			output = new PlayerStatInfo();
			output.Set(ref this);
		}
	}
}