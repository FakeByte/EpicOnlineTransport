// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Output parameters for the <see cref="OnAchievementsUnlockedCallback" /> Function.
	/// </summary>
	public struct OnAchievementsUnlockedCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Context that was passed into <see cref="AchievementsInterface.AddNotifyAchievementsUnlocked" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID for the user who received the unlocked achievements notification
		/// </summary>
		public ProductUserId UserId { get; set; }

		/// <summary>
		/// This member is not used and will always be set to <see langword="null" />.
		/// </summary>
		public Utf8String[] AchievementIds { get; set; }

		public Result? GetResultCode()
		{
			return null;
		}

		internal void Set(ref OnAchievementsUnlockedCallbackInfoInternal other)
		{
			ClientData = other.ClientData;
			UserId = other.UserId;
			AchievementIds = other.AchievementIds;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct OnAchievementsUnlockedCallbackInfoInternal : ICallbackInfoInternal, IGettable<OnAchievementsUnlockedCallbackInfo>, ISettable<OnAchievementsUnlockedCallbackInfo>, System.IDisposable
	{
		private System.IntPtr m_ClientData;
		private System.IntPtr m_UserId;
		private uint m_AchievementsCount;
		private System.IntPtr m_AchievementIds;

		public object ClientData
		{
			get
			{
				object value;
				Helper.Get(m_ClientData, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_ClientData);
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public ProductUserId UserId
		{
			get
			{
				ProductUserId value;
				Helper.Get(m_UserId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_UserId);
			}
		}

		public Utf8String[] AchievementIds
		{
			get
			{
				Utf8String[] value;
				Helper.Get(m_AchievementIds, out value, m_AchievementsCount, true);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_AchievementIds, true, out m_AchievementsCount);
			}
		}

		public void Set(ref OnAchievementsUnlockedCallbackInfo other)
		{
			ClientData = other.ClientData;
			UserId = other.UserId;
			AchievementIds = other.AchievementIds;
		}

		public void Set(ref OnAchievementsUnlockedCallbackInfo? other)
		{
			if (other.HasValue)
			{
				ClientData = other.Value.ClientData;
				UserId = other.Value.UserId;
				AchievementIds = other.Value.AchievementIds;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ClientData);
			Helper.Dispose(ref m_UserId);
			Helper.Dispose(ref m_AchievementIds);
		}

		public void Get(out OnAchievementsUnlockedCallbackInfo output)
		{
			output = new OnAchievementsUnlockedCallbackInfo();
			output.Set(ref this);
		}
	}
}