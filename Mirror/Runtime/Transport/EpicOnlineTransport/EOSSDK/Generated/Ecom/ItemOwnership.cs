// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single item ownership associated with an account. This structure is
	/// returned as part of the <see cref="QueryOwnershipCallbackInfo" /> structure.
	/// </summary>
	public struct ItemOwnership
	{
		/// <summary>
		/// ID of the catalog item
		/// </summary>
		public Utf8String Id { get; set; }

		/// <summary>
		/// Is this catalog item owned by the local user
		/// </summary>
		public OwnershipStatus OwnershipStatus { get; set; }

		internal void Set(ref ItemOwnershipInternal other)
		{
			Id = other.Id;
			OwnershipStatus = other.OwnershipStatus;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct ItemOwnershipInternal : IGettable<ItemOwnership>, ISettable<ItemOwnership>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_Id;
		private OwnershipStatus m_OwnershipStatus;

		public Utf8String Id
		{
			get
			{
				Utf8String value;
				Helper.Get(m_Id, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_Id);
			}
		}

		public OwnershipStatus OwnershipStatus
		{
			get
			{
				return m_OwnershipStatus;
			}

			set
			{
				m_OwnershipStatus = value;
			}
		}

		public void Set(ref ItemOwnership other)
		{
			m_ApiVersion = EcomInterface.ItemownershipApiLatest;
			Id = other.Id;
			OwnershipStatus = other.OwnershipStatus;
		}

		public void Set(ref ItemOwnership? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = EcomInterface.ItemownershipApiLatest;
				Id = other.Value.Id;
				OwnershipStatus = other.Value.OwnershipStatus;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Id);
		}

		public void Get(out ItemOwnership output)
		{
			output = new ItemOwnership();
			output.Set(ref this);
		}
	}
}