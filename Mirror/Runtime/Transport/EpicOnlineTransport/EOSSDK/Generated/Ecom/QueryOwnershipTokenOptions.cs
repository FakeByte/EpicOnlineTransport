// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Input parameters for the <see cref="EcomInterface.QueryOwnershipToken" /> function.
	/// </summary>
	public struct QueryOwnershipTokenOptions
	{
		/// <summary>
		/// The Epic Account ID of the local user whose ownership token you want to query
		/// </summary>
		public EpicAccountId LocalUserId { get; set; }

		/// <summary>
		/// The array of Catalog Item IDs to check for ownership, matching in number to the CatalogItemIdCount
		/// </summary>
		public Utf8String[] CatalogItemIds { get; set; }

		/// <summary>
		/// Optional product namespace, if not the one specified during initialization
		/// </summary>
		public Utf8String CatalogNamespace { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct QueryOwnershipTokenOptionsInternal : ISettable<QueryOwnershipTokenOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private System.IntPtr m_CatalogItemIds;
		private uint m_CatalogItemIdCount;
		private System.IntPtr m_CatalogNamespace;

		public EpicAccountId LocalUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public Utf8String[] CatalogItemIds
		{
			set
			{
				Helper.Set(value, ref m_CatalogItemIds, out m_CatalogItemIdCount);
			}
		}

		public Utf8String CatalogNamespace
		{
			set
			{
				Helper.Set(value, ref m_CatalogNamespace);
			}
		}

		public void Set(ref QueryOwnershipTokenOptions other)
		{
			m_ApiVersion = EcomInterface.QueryownershiptokenApiLatest;
			LocalUserId = other.LocalUserId;
			CatalogItemIds = other.CatalogItemIds;
			CatalogNamespace = other.CatalogNamespace;
		}

		public void Set(ref QueryOwnershipTokenOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = EcomInterface.QueryownershiptokenApiLatest;
				LocalUserId = other.Value.LocalUserId;
				CatalogItemIds = other.Value.CatalogItemIds;
				CatalogNamespace = other.Value.CatalogNamespace;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_CatalogItemIds);
			Helper.Dispose(ref m_CatalogNamespace);
		}
	}
}