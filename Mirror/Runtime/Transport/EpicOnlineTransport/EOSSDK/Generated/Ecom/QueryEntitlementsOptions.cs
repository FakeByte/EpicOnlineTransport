// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Input parameters for the <see cref="EcomInterface.QueryEntitlements" /> function.
	/// </summary>
	public struct QueryEntitlementsOptions
	{
		/// <summary>
		/// The Epic Account ID of the local user whose Entitlements you want to retrieve
		/// </summary>
		public EpicAccountId LocalUserId { get; set; }

		/// <summary>
		/// An array of Entitlement Names that you want to check
		/// </summary>
		public Utf8String[] EntitlementNames { get; set; }

		/// <summary>
		/// If true, Entitlements that have been redeemed will be included in the results.
		/// </summary>
		public bool IncludeRedeemed { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct QueryEntitlementsOptionsInternal : ISettable<QueryEntitlementsOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private System.IntPtr m_EntitlementNames;
		private uint m_EntitlementNameCount;
		private int m_IncludeRedeemed;

		public EpicAccountId LocalUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public Utf8String[] EntitlementNames
		{
			set
			{
				Helper.Set(value, ref m_EntitlementNames, out m_EntitlementNameCount);
			}
		}

		public bool IncludeRedeemed
		{
			set
			{
				Helper.Set(value, ref m_IncludeRedeemed);
			}
		}

		public void Set(ref QueryEntitlementsOptions other)
		{
			m_ApiVersion = EcomInterface.QueryentitlementsApiLatest;
			LocalUserId = other.LocalUserId;
			EntitlementNames = other.EntitlementNames;
			IncludeRedeemed = other.IncludeRedeemed;
		}

		public void Set(ref QueryEntitlementsOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = EcomInterface.QueryentitlementsApiLatest;
				LocalUserId = other.Value.LocalUserId;
				EntitlementNames = other.Value.EntitlementNames;
				IncludeRedeemed = other.Value.IncludeRedeemed;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_EntitlementNames);
		}
	}
}