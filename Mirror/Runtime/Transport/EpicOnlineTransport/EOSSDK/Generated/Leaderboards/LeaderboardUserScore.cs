// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Leaderboards
{
	/// <summary>
	/// Contains information about a single leaderboard user score
	/// </summary>
	public struct LeaderboardUserScore
	{
		/// <summary>
		/// The Product User ID of the user who got this score
		/// </summary>
		public ProductUserId UserId { get; set; }

		/// <summary>
		/// Leaderboard score
		/// </summary>
		public int Score { get; set; }

		internal void Set(ref LeaderboardUserScoreInternal other)
		{
			UserId = other.UserId;
			Score = other.Score;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LeaderboardUserScoreInternal : IGettable<LeaderboardUserScore>, ISettable<LeaderboardUserScore>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_UserId;
		private int m_Score;

		public ProductUserId UserId
		{
			get
			{
				ProductUserId value;
				Helper.Get(m_UserId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_UserId);
			}
		}

		public int Score
		{
			get
			{
				return m_Score;
			}

			set
			{
				m_Score = value;
			}
		}

		public void Set(ref LeaderboardUserScore other)
		{
			m_ApiVersion = LeaderboardsInterface.LeaderboarduserscoreApiLatest;
			UserId = other.UserId;
			Score = other.Score;
		}

		public void Set(ref LeaderboardUserScore? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = LeaderboardsInterface.LeaderboarduserscoreApiLatest;
				UserId = other.Value.UserId;
				Score = other.Value.Score;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_UserId);
		}

		public void Get(out LeaderboardUserScore output)
		{
			output = new LeaderboardUserScore();
			output.Set(ref this);
		}
	}
}