// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Leaderboards
{
	/// <summary>
	/// Contains information about a single leaderboard record
	/// </summary>
	public struct LeaderboardRecord
	{
		/// <summary>
		/// The Product User ID associated with this record
		/// </summary>
		public ProductUserId UserId { get; set; }

		/// <summary>
		/// Sorted position on leaderboard
		/// </summary>
		public uint Rank { get; set; }

		/// <summary>
		/// Leaderboard score
		/// </summary>
		public int Score { get; set; }

		/// <summary>
		/// The latest display name seen for the user since they last time logged in. This is empty if the user does not have a display name set.
		/// </summary>
		public Utf8String UserDisplayName { get; set; }

		internal void Set(ref LeaderboardRecordInternal other)
		{
			UserId = other.UserId;
			Rank = other.Rank;
			Score = other.Score;
			UserDisplayName = other.UserDisplayName;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LeaderboardRecordInternal : IGettable<LeaderboardRecord>, ISettable<LeaderboardRecord>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_UserId;
		private uint m_Rank;
		private int m_Score;
		private System.IntPtr m_UserDisplayName;

		public ProductUserId UserId
		{
			get
			{
				ProductUserId value;
				Helper.Get(m_UserId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_UserId);
			}
		}

		public uint Rank
		{
			get
			{
				return m_Rank;
			}

			set
			{
				m_Rank = value;
			}
		}

		public int Score
		{
			get
			{
				return m_Score;
			}

			set
			{
				m_Score = value;
			}
		}

		public Utf8String UserDisplayName
		{
			get
			{
				Utf8String value;
				Helper.Get(m_UserDisplayName, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_UserDisplayName);
			}
		}

		public void Set(ref LeaderboardRecord other)
		{
			m_ApiVersion = LeaderboardsInterface.LeaderboardrecordApiLatest;
			UserId = other.UserId;
			Rank = other.Rank;
			Score = other.Score;
			UserDisplayName = other.UserDisplayName;
		}

		public void Set(ref LeaderboardRecord? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = LeaderboardsInterface.LeaderboardrecordApiLatest;
				UserId = other.Value.UserId;
				Rank = other.Value.Rank;
				Score = other.Value.Score;
				UserDisplayName = other.Value.UserDisplayName;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_UserId);
			Helper.Dispose(ref m_UserDisplayName);
		}

		public void Get(out LeaderboardRecord output)
		{
			output = new LeaderboardRecord();
			output.Set(ref this);
		}
	}
}