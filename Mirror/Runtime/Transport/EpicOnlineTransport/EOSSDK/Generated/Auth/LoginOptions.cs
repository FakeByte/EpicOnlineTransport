// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Input parameters for the <see cref="AuthInterface.Login" /> function.
	/// </summary>
	public struct LoginOptions
	{
		/// <summary>
		/// Credentials specified for a given login method
		/// </summary>
		public Credentials? Credentials { get; set; }

		/// <summary>
		/// Auth scope flags are permissions to request from the user while they are logging in. This is a bitwise-or union of <see cref="AuthScopeFlags" /> flags defined above
		/// </summary>
		public AuthScopeFlags ScopeFlags { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LoginOptionsInternal : ISettable<LoginOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_Credentials;
		private AuthScopeFlags m_ScopeFlags;

		public Credentials? Credentials
		{
			set
			{
				Helper.Set<Credentials, CredentialsInternal>(ref value, ref m_Credentials);
			}
		}

		public AuthScopeFlags ScopeFlags
		{
			set
			{
				m_ScopeFlags = value;
			}
		}

		public void Set(ref LoginOptions other)
		{
			m_ApiVersion = AuthInterface.LoginApiLatest;
			Credentials = other.Credentials;
			ScopeFlags = other.ScopeFlags;
		}

		public void Set(ref LoginOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AuthInterface.LoginApiLatest;
				Credentials = other.Value.Credentials;
				ScopeFlags = other.Value.ScopeFlags;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_Credentials);
		}
	}
}