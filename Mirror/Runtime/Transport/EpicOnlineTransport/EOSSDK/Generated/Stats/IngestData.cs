// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Stats
{
	/// <summary>
	/// Contains information about a single stat to ingest.
	/// </summary>
	public struct IngestData
	{
		/// <summary>
		/// The name of the stat to ingest.
		/// </summary>
		public Utf8String StatName { get; set; }

		/// <summary>
		/// The amount to ingest the stat.
		/// </summary>
		public int IngestAmount { get; set; }

		internal void Set(ref IngestDataInternal other)
		{
			StatName = other.StatName;
			IngestAmount = other.IngestAmount;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct IngestDataInternal : IGettable<IngestData>, ISettable<IngestData>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_StatName;
		private int m_IngestAmount;

		public Utf8String StatName
		{
			get
			{
				Utf8String value;
				Helper.Get(m_StatName, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_StatName);
			}
		}

		public int IngestAmount
		{
			get
			{
				return m_IngestAmount;
			}

			set
			{
				m_IngestAmount = value;
			}
		}

		public void Set(ref IngestData other)
		{
			m_ApiVersion = StatsInterface.IngestdataApiLatest;
			StatName = other.StatName;
			IngestAmount = other.IngestAmount;
		}

		public void Set(ref IngestData? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = StatsInterface.IngestdataApiLatest;
				StatName = other.Value.StatName;
				IngestAmount = other.Value.IngestAmount;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_StatName);
		}

		public void Get(out IngestData output)
		{
			output = new IngestData();
			output.Set(ref this);
		}
	}
}