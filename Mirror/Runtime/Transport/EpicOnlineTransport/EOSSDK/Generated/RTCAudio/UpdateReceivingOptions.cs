// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.RTCAudio
{
	/// <summary>
	/// This struct is passed in with a call to <see cref="RTCAudioInterface.UpdateReceiving" />.
	/// </summary>
	public struct UpdateReceivingOptions
	{
		/// <summary>
		/// The Product User ID of the user trying to request this operation.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The room this settings should be applied on.
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// The participant to modify or null to update the global configuration
		/// </summary>
		public ProductUserId ParticipantId { get; set; }

		/// <summary>
		/// Mute or unmute audio track
		/// </summary>
		public bool AudioEnabled { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct UpdateReceivingOptionsInternal : ISettable<UpdateReceivingOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private System.IntPtr m_RoomName;
		private System.IntPtr m_ParticipantId;
		private int m_AudioEnabled;

		public ProductUserId LocalUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public Utf8String RoomName
		{
			set
			{
				Helper.Set(value, ref m_RoomName);
			}
		}

		public ProductUserId ParticipantId
		{
			set
			{
				Helper.Set(value, ref m_ParticipantId);
			}
		}

		public bool AudioEnabled
		{
			set
			{
				Helper.Set(value, ref m_AudioEnabled);
			}
		}

		public void Set(ref UpdateReceivingOptions other)
		{
			m_ApiVersion = RTCAudioInterface.UpdatereceivingApiLatest;
			LocalUserId = other.LocalUserId;
			RoomName = other.RoomName;
			ParticipantId = other.ParticipantId;
			AudioEnabled = other.AudioEnabled;
		}

		public void Set(ref UpdateReceivingOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = RTCAudioInterface.UpdatereceivingApiLatest;
				LocalUserId = other.Value.LocalUserId;
				RoomName = other.Value.RoomName;
				ParticipantId = other.Value.ParticipantId;
				AudioEnabled = other.Value.AudioEnabled;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_RoomName);
			Helper.Dispose(ref m_ParticipantId);
		}
	}
}