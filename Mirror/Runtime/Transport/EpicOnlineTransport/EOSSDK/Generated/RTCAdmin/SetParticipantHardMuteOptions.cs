// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.RTCAdmin
{
	/// <summary>
	/// Input parameters for the <see cref="RTCAdminInterface.SetParticipantHardMute" /> function.
	/// </summary>
	public struct SetParticipantHardMuteOptions
	{
		/// <summary>
		/// Room to kick the participant from
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// Product User ID of the participant to hard mute for every participant in the room.
		/// </summary>
		public ProductUserId TargetUserId { get; set; }

		/// <summary>
		/// Hard mute status (Mute on or off)
		/// </summary>
		public bool Mute { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct SetParticipantHardMuteOptionsInternal : ISettable<SetParticipantHardMuteOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_RoomName;
		private System.IntPtr m_TargetUserId;
		private int m_Mute;

		public Utf8String RoomName
		{
			set
			{
				Helper.Set(value, ref m_RoomName);
			}
		}

		public ProductUserId TargetUserId
		{
			set
			{
				Helper.Set(value, ref m_TargetUserId);
			}
		}

		public bool Mute
		{
			set
			{
				Helper.Set(value, ref m_Mute);
			}
		}

		public void Set(ref SetParticipantHardMuteOptions other)
		{
			m_ApiVersion = RTCAdminInterface.SetparticipanthardmuteApiLatest;
			RoomName = other.RoomName;
			TargetUserId = other.TargetUserId;
			Mute = other.Mute;
		}

		public void Set(ref SetParticipantHardMuteOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = RTCAdminInterface.SetparticipanthardmuteApiLatest;
				RoomName = other.Value.RoomName;
				TargetUserId = other.Value.TargetUserId;
				Mute = other.Value.Mute;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_RoomName);
			Helper.Dispose(ref m_TargetUserId);
		}
	}
}