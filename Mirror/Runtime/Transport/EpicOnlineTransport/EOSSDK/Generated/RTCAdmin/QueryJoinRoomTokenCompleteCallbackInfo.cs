// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.RTCAdmin
{
	/// <summary>
	/// Data containing the result information for a query join room token request.
	/// </summary>
	public struct QueryJoinRoomTokenCompleteCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// The <see cref="Result" /> code for the operation. <see cref="Result.Success" /> indicates that the operation succeeded; other codes indicate errors.
		/// </summary>
		public Result ResultCode { get; set; }

		/// <summary>
		/// Context that was passed into <see cref="RTCAdminInterface.QueryJoinRoomToken" />.
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// Room the request was made for.
		/// </summary>
		public Utf8String RoomName { get; set; }

		/// <summary>
		/// URL passed to backend to join room.
		/// </summary>
		public Utf8String ClientBaseUrl { get; set; }

		/// <summary>
		/// If the query completed successfully, this contains an identifier that should be used to retrieve the tokens.
		/// This identifier is only valid for the duration of the callback.
		/// <seealso cref="RTCAdminInterface.CopyUserTokenByIndex" />
		/// <seealso cref="RTCAdminInterface.CopyUserTokenByUserId" />
		/// </summary>
		public uint QueryId { get; set; }

		/// <summary>
		/// How many token received as result of the query
		/// </summary>
		public uint TokenCount { get; set; }

		public Result? GetResultCode()
		{
			return ResultCode;
		}

		internal void Set(ref QueryJoinRoomTokenCompleteCallbackInfoInternal other)
		{
			ResultCode = other.ResultCode;
			ClientData = other.ClientData;
			RoomName = other.RoomName;
			ClientBaseUrl = other.ClientBaseUrl;
			QueryId = other.QueryId;
			TokenCount = other.TokenCount;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct QueryJoinRoomTokenCompleteCallbackInfoInternal : ICallbackInfoInternal, IGettable<QueryJoinRoomTokenCompleteCallbackInfo>, ISettable<QueryJoinRoomTokenCompleteCallbackInfo>, System.IDisposable
	{
		private Result m_ResultCode;
		private System.IntPtr m_ClientData;
		private System.IntPtr m_RoomName;
		private System.IntPtr m_ClientBaseUrl;
		private uint m_QueryId;
		private uint m_TokenCount;

		public Result ResultCode
		{
			get
			{
				return m_ResultCode;
			}

			set
			{
				m_ResultCode = value;
			}
		}

		public object ClientData
		{
			get
			{
				object value;
				Helper.Get(m_ClientData, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_ClientData);
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public Utf8String RoomName
		{
			get
			{
				Utf8String value;
				Helper.Get(m_RoomName, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_RoomName);
			}
		}

		public Utf8String ClientBaseUrl
		{
			get
			{
				Utf8String value;
				Helper.Get(m_ClientBaseUrl, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_ClientBaseUrl);
			}
		}

		public uint QueryId
		{
			get
			{
				return m_QueryId;
			}

			set
			{
				m_QueryId = value;
			}
		}

		public uint TokenCount
		{
			get
			{
				return m_TokenCount;
			}

			set
			{
				m_TokenCount = value;
			}
		}

		public void Set(ref QueryJoinRoomTokenCompleteCallbackInfo other)
		{
			ResultCode = other.ResultCode;
			ClientData = other.ClientData;
			RoomName = other.RoomName;
			ClientBaseUrl = other.ClientBaseUrl;
			QueryId = other.QueryId;
			TokenCount = other.TokenCount;
		}

		public void Set(ref QueryJoinRoomTokenCompleteCallbackInfo? other)
		{
			if (other.HasValue)
			{
				ResultCode = other.Value.ResultCode;
				ClientData = other.Value.ClientData;
				RoomName = other.Value.RoomName;
				ClientBaseUrl = other.Value.ClientBaseUrl;
				QueryId = other.Value.QueryId;
				TokenCount = other.Value.TokenCount;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ClientData);
			Helper.Dispose(ref m_RoomName);
			Helper.Dispose(ref m_ClientBaseUrl);
		}

		public void Get(out QueryJoinRoomTokenCompleteCallbackInfo output)
		{
			output = new QueryJoinRoomTokenCompleteCallbackInfo();
			output.Set(ref this);
		}
	}
}