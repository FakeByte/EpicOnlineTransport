// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatCommon
{
	public struct LogPlayerSpawnOptions
	{
		/// <summary>
		/// Locally unique value used in RegisterClient/RegisterPeer
		/// </summary>
		public System.IntPtr SpawnedPlayerHandle { get; set; }

		/// <summary>
		/// Optional identifier for the player's team. If none, use 0.
		/// </summary>
		public uint TeamId { get; set; }

		/// <summary>
		/// Optional identifier for the player's character. If none, use 0.
		/// </summary>
		public uint CharacterId { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LogPlayerSpawnOptionsInternal : ISettable<LogPlayerSpawnOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_SpawnedPlayerHandle;
		private uint m_TeamId;
		private uint m_CharacterId;

		public System.IntPtr SpawnedPlayerHandle
		{
			set
			{
				m_SpawnedPlayerHandle = value;
			}
		}

		public uint TeamId
		{
			set
			{
				m_TeamId = value;
			}
		}

		public uint CharacterId
		{
			set
			{
				m_CharacterId = value;
			}
		}

		public void Set(ref LogPlayerSpawnOptions other)
		{
			m_ApiVersion = AntiCheatCommonInterface.LogplayerspawnApiLatest;
			SpawnedPlayerHandle = other.SpawnedPlayerHandle;
			TeamId = other.TeamId;
			CharacterId = other.CharacterId;
		}

		public void Set(ref LogPlayerSpawnOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AntiCheatCommonInterface.LogplayerspawnApiLatest;
				SpawnedPlayerHandle = other.Value.SpawnedPlayerHandle;
				TeamId = other.Value.TeamId;
				CharacterId = other.Value.CharacterId;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_SpawnedPlayerHandle);
		}
	}
}