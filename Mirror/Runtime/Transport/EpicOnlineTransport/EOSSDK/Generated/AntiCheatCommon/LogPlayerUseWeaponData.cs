// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatCommon
{
	public struct LogPlayerUseWeaponData
	{
		/// <summary>
		/// Locally unique value used in RegisterClient/RegisterPeer
		/// </summary>
		public System.IntPtr PlayerHandle { get; set; }

		/// <summary>
		/// Attack origin world position as a 3D vector
		/// </summary>
		public Vec3f? PlayerPosition { get; set; }

		/// <summary>
		/// Attack direction as a quaternion
		/// </summary>
		public Quat? PlayerViewRotation { get; set; }

		/// <summary>
		/// True if the player's view is zoomed (e.g. using a sniper rifle), otherwise false
		/// </summary>
		public bool IsPlayerViewZoomed { get; set; }

		/// <summary>
		/// Set to true if the player is using a melee attack, otherwise false
		/// </summary>
		public bool IsMeleeAttack { get; set; }

		/// <summary>
		/// Name of the weapon used. Will be truncated to <see cref="AntiCheatCommonInterface.LogplayeruseweaponWeaponnameMaxLength" /> bytes if longer.
		/// </summary>
		public Utf8String WeaponName { get; set; }

		internal void Set(ref LogPlayerUseWeaponDataInternal other)
		{
			PlayerHandle = other.PlayerHandle;
			PlayerPosition = other.PlayerPosition;
			PlayerViewRotation = other.PlayerViewRotation;
			IsPlayerViewZoomed = other.IsPlayerViewZoomed;
			IsMeleeAttack = other.IsMeleeAttack;
			WeaponName = other.WeaponName;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LogPlayerUseWeaponDataInternal : IGettable<LogPlayerUseWeaponData>, ISettable<LogPlayerUseWeaponData>, System.IDisposable
	{
		private System.IntPtr m_PlayerHandle;
		private System.IntPtr m_PlayerPosition;
		private System.IntPtr m_PlayerViewRotation;
		private int m_IsPlayerViewZoomed;
		private int m_IsMeleeAttack;
		private System.IntPtr m_WeaponName;

		public System.IntPtr PlayerHandle
		{
			get
			{
				return m_PlayerHandle;
			}

			set
			{
				m_PlayerHandle = value;
			}
		}

		public Vec3f? PlayerPosition
		{
			get
			{
				Vec3f? value;
				Helper.Get<Vec3fInternal, Vec3f>(m_PlayerPosition, out value);
				return value;
			}

			set
			{
				Helper.Set<Vec3f, Vec3fInternal>(ref value, ref m_PlayerPosition);
			}
		}

		public Quat? PlayerViewRotation
		{
			get
			{
				Quat? value;
				Helper.Get<QuatInternal, Quat>(m_PlayerViewRotation, out value);
				return value;
			}

			set
			{
				Helper.Set<Quat, QuatInternal>(ref value, ref m_PlayerViewRotation);
			}
		}

		public bool IsPlayerViewZoomed
		{
			get
			{
				bool value;
				Helper.Get(m_IsPlayerViewZoomed, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_IsPlayerViewZoomed);
			}
		}

		public bool IsMeleeAttack
		{
			get
			{
				bool value;
				Helper.Get(m_IsMeleeAttack, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_IsMeleeAttack);
			}
		}

		public Utf8String WeaponName
		{
			get
			{
				Utf8String value;
				Helper.Get(m_WeaponName, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_WeaponName);
			}
		}

		public void Set(ref LogPlayerUseWeaponData other)
		{
			PlayerHandle = other.PlayerHandle;
			PlayerPosition = other.PlayerPosition;
			PlayerViewRotation = other.PlayerViewRotation;
			IsPlayerViewZoomed = other.IsPlayerViewZoomed;
			IsMeleeAttack = other.IsMeleeAttack;
			WeaponName = other.WeaponName;
		}

		public void Set(ref LogPlayerUseWeaponData? other)
		{
			if (other.HasValue)
			{
				PlayerHandle = other.Value.PlayerHandle;
				PlayerPosition = other.Value.PlayerPosition;
				PlayerViewRotation = other.Value.PlayerViewRotation;
				IsPlayerViewZoomed = other.Value.IsPlayerViewZoomed;
				IsMeleeAttack = other.Value.IsMeleeAttack;
				WeaponName = other.Value.WeaponName;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_PlayerHandle);
			Helper.Dispose(ref m_PlayerPosition);
			Helper.Dispose(ref m_PlayerViewRotation);
			Helper.Dispose(ref m_WeaponName);
		}

		public void Get(out LogPlayerUseWeaponData output)
		{
			output = new LogPlayerUseWeaponData();
			output.Set(ref this);
		}
	}
}