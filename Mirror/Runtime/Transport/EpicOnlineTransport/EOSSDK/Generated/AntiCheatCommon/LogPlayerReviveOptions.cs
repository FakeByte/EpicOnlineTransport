// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatCommon
{
	public struct LogPlayerReviveOptions
	{
		/// <summary>
		/// Locally unique value used in RegisterClient/RegisterPeer
		/// </summary>
		public System.IntPtr RevivedPlayerHandle { get; set; }

		/// <summary>
		/// Locally unique value used in RegisterClient/RegisterPeer
		/// </summary>
		public System.IntPtr ReviverPlayerHandle { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LogPlayerReviveOptionsInternal : ISettable<LogPlayerReviveOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_RevivedPlayerHandle;
		private System.IntPtr m_ReviverPlayerHandle;

		public System.IntPtr RevivedPlayerHandle
		{
			set
			{
				m_RevivedPlayerHandle = value;
			}
		}

		public System.IntPtr ReviverPlayerHandle
		{
			set
			{
				m_ReviverPlayerHandle = value;
			}
		}

		public void Set(ref LogPlayerReviveOptions other)
		{
			m_ApiVersion = AntiCheatCommonInterface.LogplayerreviveApiLatest;
			RevivedPlayerHandle = other.RevivedPlayerHandle;
			ReviverPlayerHandle = other.ReviverPlayerHandle;
		}

		public void Set(ref LogPlayerReviveOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AntiCheatCommonInterface.LogplayerreviveApiLatest;
				RevivedPlayerHandle = other.Value.RevivedPlayerHandle;
				ReviverPlayerHandle = other.Value.ReviverPlayerHandle;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_RevivedPlayerHandle);
			Helper.Dispose(ref m_ReviverPlayerHandle);
		}
	}
}