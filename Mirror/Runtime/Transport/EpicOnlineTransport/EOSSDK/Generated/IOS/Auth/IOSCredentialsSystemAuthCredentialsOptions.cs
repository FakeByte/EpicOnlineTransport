// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Options for initializing login for IOS.
	/// </summary>
	public struct IOSCredentialsSystemAuthCredentialsOptions
	{
		/// <summary>
		/// When calling <see cref="AuthInterface.Login" />
		/// NSObject that implements the ASWebAuthenticationPresentationContextProviding protocol,
		/// typically this is added to the applications UIViewController.
		/// Required for iOS 13+ only, for earlier versions this value must be a nullptr.
		/// using: (<see cref="void" />*)CFBridgingRetain(presentationContextProviding)
		/// EOSSDK will release this bridged object when the value is consumed for iOS 13+.
		/// </summary>
		public System.IntPtr PresentationContextProviding { get; set; }

		internal void Set(ref IOSCredentialsSystemAuthCredentialsOptionsInternal other)
		{
			PresentationContextProviding = other.PresentationContextProviding;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct IOSCredentialsSystemAuthCredentialsOptionsInternal : IGettable<IOSCredentialsSystemAuthCredentialsOptions>, ISettable<IOSCredentialsSystemAuthCredentialsOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_PresentationContextProviding;

		public System.IntPtr PresentationContextProviding
		{
			get
			{
				return m_PresentationContextProviding;
			}

			set
			{
				m_PresentationContextProviding = value;
			}
		}

		public void Set(ref IOSCredentialsSystemAuthCredentialsOptions other)
		{
			m_ApiVersion = AuthInterface.IosCredentialssystemauthcredentialsoptionsApiLatest;
			PresentationContextProviding = other.PresentationContextProviding;
		}

		public void Set(ref IOSCredentialsSystemAuthCredentialsOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AuthInterface.IosCredentialssystemauthcredentialsoptionsApiLatest;
				PresentationContextProviding = other.Value.PresentationContextProviding;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_PresentationContextProviding);
		}

		public void Get(out IOSCredentialsSystemAuthCredentialsOptions output)
		{
			output = new IOSCredentialsSystemAuthCredentialsOptions();
			output.Set(ref this);
		}
	}
}