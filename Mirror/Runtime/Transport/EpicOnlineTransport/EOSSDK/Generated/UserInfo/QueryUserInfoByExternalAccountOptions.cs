// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.UserInfo
{
	/// <summary>
	/// Input parameters for the <see cref="UserInfoInterface.QueryUserInfoByExternalAccount" /> function.
	/// </summary>
	public struct QueryUserInfoByExternalAccountOptions
	{
		/// <summary>
		/// The Epic Account ID of the local player requesting the information
		/// </summary>
		public EpicAccountId LocalUserId { get; set; }

		/// <summary>
		/// External account ID of the user whose information is being retrieved
		/// </summary>
		public Utf8String ExternalAccountId { get; set; }

		/// <summary>
		/// Account type of the external user info to query
		/// </summary>
		public ExternalAccountType AccountType { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct QueryUserInfoByExternalAccountOptionsInternal : ISettable<QueryUserInfoByExternalAccountOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private System.IntPtr m_ExternalAccountId;
		private ExternalAccountType m_AccountType;

		public EpicAccountId LocalUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public Utf8String ExternalAccountId
		{
			set
			{
				Helper.Set(value, ref m_ExternalAccountId);
			}
		}

		public ExternalAccountType AccountType
		{
			set
			{
				m_AccountType = value;
			}
		}

		public void Set(ref QueryUserInfoByExternalAccountOptions other)
		{
			m_ApiVersion = UserInfoInterface.QueryuserinfobyexternalaccountApiLatest;
			LocalUserId = other.LocalUserId;
			ExternalAccountId = other.ExternalAccountId;
			AccountType = other.AccountType;
		}

		public void Set(ref QueryUserInfoByExternalAccountOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = UserInfoInterface.QueryuserinfobyexternalaccountApiLatest;
				LocalUserId = other.Value.LocalUserId;
				ExternalAccountId = other.Value.ExternalAccountId;
				AccountType = other.Value.AccountType;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_ExternalAccountId);
		}
	}
}